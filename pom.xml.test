<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <!-- Version du fichier -->
    <modelVersion>4.0.0</modelVersion>
    <!-- POM parent -->
    <!-- Definition de l'artefact -->
    <groupId>org.fifiz.training.java</groupId>
    <artifactId>monolithic-weather-app</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>monolithic-weather-app</name>
    <description>Application Java basique et autonome donnant la météo pour un code postal en France</description>
    <!-- FIXME change it to the project's website -->
    <url>https://bdelion.github.io/monolithic-weather-app/</url>
    <!-- Gestionnaire de code source -->
    <!-- https://github.com/kevinsawicki/github-maven-example/blob/master/example/pom.xml -->
    <scm>
        <url>https://github.com/bdelion/monolithic-weather-app</url>
        <connection>scm:git:git://github.com/bdelion/monolithic-weather-app.git</connection>
        <developerConnection>scm:git:git@github.com:bdelion/monolithic-weather-app.git</developerConnection>
        <tag>HEAD</tag>
    </scm>
    <issueManagement>
        <url>https://github.com/bdelion/monolithic-weather-app/issues</url>
        <system>GitHub Issues</system>
    </issueManagement>
    <developers>
        <developer>
            <email>bertrand.delion@free.fr</email>
            <name>Bertrand Delion</name>
            <url>https://github.com/bdelion</url>
            <id>bdelion</id>
        </developer>
    </developers>
    <!-- Liste des proprietes -->
    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <codacy-api-token>iORaPgvl6OEVY3UfnsoL</codacy-api-token>
        <codecy-project-token>e150ffd07c32435893bb6902d28fb555</codecy-project-token>
        <coveralls-repo-token>VdPhmjc9brgL7RKjVLV4JX8IOtkxwxNxd</coveralls-repo-token>
    </properties>
    <!-- Liste des dependances -->
    <dependencies>
        <!--TODEL
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.5</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.5</version>
        </dependency>
        -->
        <!-- Pour les logs -->
        <!-- mvn dependency:analyze -DignoreNonCompile=true -> Unused declared dependencies found:
        -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.11.2</version>
            <scope>compile</scope>
        </dependency>
        <!-- mvn dependency:analyze -DignoreNonCompile=true -> Used undeclared dependencies found:
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.11.2</version>
        </dependency>
        -->
        <!-- Pour javax -->
        <dependency>
            <groupId>javax.faces</groupId>
            <artifactId>javax.faces-api</artifactId>
            <version>2.3</version>
            <scope>provided</scope>
        </dependency>
        <!-- <dependency>
            <groupId>com.sun.faces</groupId>
            <artifactId>jsf-api</artifactId>
            <version>2.1.7</version>
        </dependency>
        <dependency>
            <groupId>com.sun.faces</groupId>
            <artifactId>jsf-impl</artifactId>
            <version>2.1.7</version>
        </dependency>
        -->
        <!-- Pour Json -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.9.8</version>
        </dependency>
        <!-- Pour les tests -->
        <dependency>
            <groupId>com.github.tomakehurst</groupId>
            <artifactId>wiremock</artifactId>
            <version>2.21.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13-beta-2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <!-- Configuration de la construction des livrables -->
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>3.0.0</version>
                    <dependencies>
                        <dependency>
                            <groupId>com.puppycrawl.tools</groupId>
                            <artifactId>checkstyle</artifactId>
                            <version>8.10</version>
                        </dependency>
                        <dependency>
                            <groupId>com.github.ngeor</groupId>
                            <artifactId>checkstyle-rules</artifactId>
                            <version>1.1.0</version>
                        </dependency>
                    </dependencies>
                    <configuration>
                        <configLocation>com/github/ngeor/checkstyle.xml</configLocation>
                        <includeTestSourceDirectory>true</includeTestSourceDirectory>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <!--
                You can run cobertura in the default profile with: mvn cobertura:cobertura coveralls:report
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <format>xml</format>
                </configuration>
                <executions>
                    <execution>
                        <id>cobertura-reporting</id>
                        <phase>test</phase>
                        <goals>
                            <goal>cobertura</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--
                You can run jacoco in the default profile with: mvn jacoco:prepare-agent test jacoco:report
            -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.3</version>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>jacoco-report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Goal qui copie les dépendances du projet du référentiel vers un emplacement défini. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/dependency-jars/</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Goal qui construit un fichier JAR (Java Archive) executable à partir des ressources et des classes de projet compilées. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.1</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>dependency-jars/</classpathPrefix>
                            <mainClass>org.fifiz.training.java.monolithic_weather_app.WeatherApp</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <!-- Plug-in nécessaire pour maven-project-info-reports-plugin 3.0.0. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>3.7.1</version>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <!-- Plug-in qui génère des rapports standard pour le projet. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <configuration>
                    <configLocation>com/github/ngeor/checkstyle.xml</configLocation>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <formats>
                        <format>html</format>
                        <format>xml</format>
                    </formats>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>cobertura</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>
    <profiles>
        <!--
        For the Checkstyle profile:
        - we want to break the build on any checkstyle violation.
        ! Manual execution !
        -->
        <profile>
            <id>checkstyle</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-checkstyle-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>checkstyle</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!--
        For the Travis profile:
        - we want to failed on any vulnerability (OWASP)
        - we want to upload code coverage reports to codacy.com
        - we want to upload code coverage reports to coveralls.io
        -->
        <profile>
            <id>travis</id>
            <activation>
                <property>
                    <name>env.TRAVIS</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- Check vulnerability -->
                    <!-- https://jeremylong.github.io/DependencyCheck/dependency-check-maven/index.html -->
                    <plugin>
                        <groupId>org.owasp</groupId>
                        <artifactId>dependency-check-maven</artifactId>
                        <version>5.0.0-M1</version>
                        <configuration>
                            <failBuildOnAnyVulnerability>true</failBuildOnAnyVulnerability>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Codacy TU coverage -->
                    <plugin>
                        <groupId>com.gavinmogan</groupId>
                        <artifactId>codacy-maven-plugin</artifactId>
                        <version>1.0.3</version>
                        <configuration>
                            <apiToken>${codacy-api-token}</apiToken>
                            <projectToken>${codecy-project-token}</projectToken>
                            <language>Java</language>
                            <coverageReportFile>${project.reporting.outputDirectory}/jacoco/jacoco.xml</coverageReportFile>
                            <commit>${env.TRAVIS_COMMIT}</commit>
                            <codacyApiBaseUrl>https://api.codacy.com</codacyApiBaseUrl>
                            <failOnMissingReportFile>true</failOnMissingReportFile>
                        </configuration>
                        <executions>
                            <execution>
                                <id>post-test</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>coverage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Coveralls TU coverage -->
                    <!-- Execute Maven to create JaCoCo report and submit Coveralls data : mvn clean test jacoco:report coveralls:report
                         https://github.com/trautonen/coveralls-maven-plugin
                    -->
                    <plugin>
                        <groupId>org.eluder.coveralls</groupId>
                        <artifactId>coveralls-maven-plugin</artifactId>
                        <version>4.3.0</version>
                        <configuration>
                            <repoToken>${coveralls-repo-token}</repoToken>
                        </configuration>
                        <executions>
                            <execution>
                                <id>post-test</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>